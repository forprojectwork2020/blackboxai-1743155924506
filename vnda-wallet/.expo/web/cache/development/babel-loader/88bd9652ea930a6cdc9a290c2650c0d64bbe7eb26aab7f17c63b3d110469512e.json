{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\nimport { Button, Card, Snackbar } from 'react-native-paper';\nimport QRCode from 'react-native-qrcode-svg';\nimport { useWallet } from \"../context/WalletContext\";\nimport { COLORS, SIZES } from \"../constants\";\nimport Header from \"../components/Header\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ReceiveScreen = function ReceiveScreen() {\n  var _useWallet = useWallet(),\n    wallet = _useWallet.wallet;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    visible = _useState2[0],\n    setVisible = _useState2[1];\n  var address = (wallet == null ? void 0 : wallet.address) || '';\n  var handleShare = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        yield Share.share({\n          message: `My TRON wallet address: ${address}`\n        });\n      } catch (error) {\n        console.error('Error sharing address:', error);\n      }\n    });\n    return function handleShare() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleCopy = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        yield Clipboard.setString(address);\n        setVisible(true);\n      } catch (error) {\n        console.error('Error copying address:', error);\n      }\n    });\n    return function handleCopy() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var onDismissSnackBar = function onDismissSnackBar() {\n    return setVisible(false);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Header, {\n      title: \"Receive\",\n      showBack: true\n    }), _jsxs(ScrollView, {\n      style: styles.content,\n      children: [_jsx(Card, {\n        style: styles.qrCard,\n        children: _jsxs(Card.Content, {\n          style: styles.qrContent,\n          children: [_jsx(Text, {\n            style: styles.title,\n            children: \"Your Wallet Address\"\n          }), _jsx(View, {\n            style: styles.qrContainer,\n            children: _jsx(QRCode, {\n              value: address,\n              size: 200,\n              backgroundColor: COLORS.surface,\n              color: COLORS.text\n            })\n          }), _jsx(Text, {\n            style: styles.address,\n            numberOfLines: 2,\n            children: address\n          }), _jsxs(View, {\n            style: styles.actions,\n            children: [_jsx(Button, {\n              mode: \"contained\",\n              onPress: handleCopy,\n              icon: \"content-copy\",\n              style: styles.button,\n              children: \"Copy Address\"\n            }), _jsx(Button, {\n              mode: \"outlined\",\n              onPress: handleShare,\n              icon: \"share-variant\",\n              style: styles.button,\n              children: \"Share Address\"\n            })]\n          })]\n        })\n      }), _jsx(Card, {\n        style: styles.infoCard,\n        children: _jsxs(Card.Content, {\n          children: [_jsx(Text, {\n            style: styles.infoTitle,\n            children: \"Important\"\n          }), _jsxs(Text, {\n            style: styles.infoText,\n            children: [\"\\u2022 Only send TRON (TRX) and TRC20 tokens to this address\", '\\n', \"\\u2022 Sending any other types of tokens may result in permanent loss\", '\\n', \"\\u2022 Double check the address before sending\"]\n          })]\n        })\n      })]\n    }), _jsx(Snackbar, {\n      visible: visible,\n      onDismiss: onDismissSnackBar,\n      duration: 2000,\n      style: styles.snackbar,\n      children: \"Address copied to clipboard\"\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background\n  },\n  content: {\n    flex: 1\n  },\n  qrCard: {\n    margin: SIZES.md\n  },\n  qrContent: {\n    alignItems: 'center',\n    padding: SIZES.lg\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: COLORS.text,\n    marginBottom: SIZES.lg\n  },\n  qrContainer: {\n    padding: SIZES.lg,\n    backgroundColor: COLORS.surface,\n    borderRadius: SIZES.md,\n    marginBottom: SIZES.lg,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3\n  },\n  address: {\n    fontSize: 14,\n    color: COLORS.text,\n    textAlign: 'center',\n    marginBottom: SIZES.lg,\n    paddingHorizontal: SIZES.md\n  },\n  actions: {\n    width: '100%',\n    gap: SIZES.md\n  },\n  button: {\n    width: '100%'\n  },\n  infoCard: {\n    margin: SIZES.md,\n    marginTop: 0\n  },\n  infoTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: COLORS.text,\n    marginBottom: SIZES.sm\n  },\n  infoText: {\n    fontSize: 14,\n    color: COLORS.textSecondary,\n    lineHeight: 20\n  },\n  snackbar: {\n    backgroundColor: COLORS.primary\n  }\n});\nexport default ReceiveScreen;","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","Share","ScrollView","Clipboard","Button","Card","Snackbar","QRCode","useWallet","COLORS","SIZES","Header","jsx","_jsx","jsxs","_jsxs","ReceiveScreen","_useWallet","wallet","_useState","_useState2","_slicedToArray","visible","setVisible","address","handleShare","_ref","_asyncToGenerator","share","message","error","console","apply","arguments","handleCopy","_ref2","setString","onDismissSnackBar","style","styles","container","children","title","showBack","content","qrCard","Content","qrContent","qrContainer","value","size","backgroundColor","surface","color","text","numberOfLines","actions","mode","onPress","icon","button","infoCard","infoTitle","infoText","onDismiss","duration","snackbar","create","flex","background","margin","md","alignItems","padding","lg","fontSize","fontWeight","marginBottom","borderRadius","elevation","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","textAlign","paddingHorizontal","gap","marginTop","sm","textSecondary","lineHeight","primary"],"sources":["/project/sandbox/user-workspace/vnda-wallet/src/screens/ReceiveScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Share, ScrollView, Clipboard } from 'react-native';\nimport { Button, Card, Snackbar } from 'react-native-paper';\nimport QRCode from 'react-native-qrcode-svg';\nimport { useWallet } from '../context/WalletContext';\nimport { COLORS, SIZES } from '../constants';\nimport Header from '../components/Header';\n\nconst ReceiveScreen = () => {\n  const { wallet } = useWallet();\n  const [visible, setVisible] = useState(false);\n  const address = wallet?.address || '';\n\n  const handleShare = async () => {\n    try {\n      await Share.share({\n        message: `My TRON wallet address: ${address}`,\n      });\n    } catch (error) {\n      console.error('Error sharing address:', error);\n    }\n  };\n\n  const handleCopy = async () => {\n    try {\n      await Clipboard.setString(address);\n      setVisible(true);\n    } catch (error) {\n      console.error('Error copying address:', error);\n    }\n  };\n\n  const onDismissSnackBar = () => setVisible(false);\n\n  return (\n    <View style={styles.container}>\n      <Header title=\"Receive\" showBack />\n      \n      <ScrollView style={styles.content}>\n        <Card style={styles.qrCard}>\n          <Card.Content style={styles.qrContent}>\n            <Text style={styles.title}>Your Wallet Address</Text>\n            \n            <View style={styles.qrContainer}>\n              <QRCode\n                value={address}\n                size={200}\n                backgroundColor={COLORS.surface}\n                color={COLORS.text}\n              />\n            </View>\n\n            <Text style={styles.address} numberOfLines={2}>\n              {address}\n            </Text>\n\n            <View style={styles.actions}>\n              <Button\n                mode=\"contained\"\n                onPress={handleCopy}\n                icon=\"content-copy\"\n                style={styles.button}\n              >\n                Copy Address\n              </Button>\n              \n              <Button\n                mode=\"outlined\"\n                onPress={handleShare}\n                icon=\"share-variant\"\n                style={styles.button}\n              >\n                Share Address\n              </Button>\n            </View>\n          </Card.Content>\n        </Card>\n\n        <Card style={styles.infoCard}>\n          <Card.Content>\n            <Text style={styles.infoTitle}>Important</Text>\n            <Text style={styles.infoText}>\n              • Only send TRON (TRX) and TRC20 tokens to this address{'\\n'}\n              • Sending any other types of tokens may result in permanent loss{'\\n'}\n              • Double check the address before sending\n            </Text>\n          </Card.Content>\n        </Card>\n      </ScrollView>\n      <Snackbar\n        visible={visible}\n        onDismiss={onDismissSnackBar}\n        duration={2000}\n        style={styles.snackbar}\n      >\n        Address copied to clipboard\n      </Snackbar>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.background,\n  },\n  content: {\n    flex: 1,\n  },\n  qrCard: {\n    margin: SIZES.md,\n  },\n  qrContent: {\n    alignItems: 'center',\n    padding: SIZES.lg,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: COLORS.text,\n    marginBottom: SIZES.lg,\n  },\n  qrContainer: {\n    padding: SIZES.lg,\n    backgroundColor: COLORS.surface,\n    borderRadius: SIZES.md,\n    marginBottom: SIZES.lg,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n  },\n  address: {\n    fontSize: 14,\n    color: COLORS.text,\n    textAlign: 'center',\n    marginBottom: SIZES.lg,\n    paddingHorizontal: SIZES.md,\n  },\n  actions: {\n    width: '100%',\n    gap: SIZES.md,\n  },\n  button: {\n    width: '100%',\n  },\n  infoCard: {\n    margin: SIZES.md,\n    marginTop: 0,\n  },\n  infoTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: COLORS.text,\n    marginBottom: SIZES.sm,\n  },\n  infoText: {\n    fontSize: 14,\n    color: COLORS.textSecondary,\n    lineHeight: 20,\n  },\n  snackbar: {\n    backgroundColor: COLORS.primary,\n  },\n});\n\nexport default ReceiveScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}